-- awesome 3 configuration file

-- Include awesome library, with lots of useful function!
require("awful")

-- {{{ Colors and fonts
awesome.font_set("sans 8")
awesome.colors_set({ fg = "white", bg = "black" })
-- }}}

-- {{{ Variables definitions
-- This is used later as the default terminal to run.
terminal = "xterm"
-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"
-- Table of layouts to cover with awful.layout.inc, order matters.
layouts = { "tile", "tileleft", "tilebottom", "tiletop", "magnifier", "max", "spiral", "dwindle", "floating" }
-- }}}

-- {{{ Tags
-- Define tags table
tags = {}
for s = 1, screen.count() do
    -- Each screen has its own tag table
    tags[s] = {}
    -- Create 9 tags per screen
    for tagnumber = 1, 9 do
        tags[s][tagnumber] = tag.new({ name = tagnumber })
        -- Add tags to screen one by one
        tags[s][tagnumber]:add(s)
    end
    -- I'm sure you want to see at least one tag.
    tags[s][1]:view(true)
end
-- }}}

-- {{{ Statusbar
-- Create a taglist widget
mytaglist = widget.new({ type = "taglist", name = "mytaglist" })
mytaglist:mouse({}, 1, awful.tag.viewonly)
mytaglist:mouse({ modkey }, 1, awful.client.toggletag)
mytaglist:mouse({}, 3,
                function (tag)
                    tag:view(not tag:isselected())
                end)
mytaglist:mouse({ modkey }, 3, awful.client.toggletag)
mytaglist:mouse({ }, 4, awful.tag.viewnext)
mytaglist:mouse({ }, 5, awful.tag.viewprev)
mytaglist:set("text_focus", "<bg color=\"#555555\"/> <title/> ")

-- Create a tasklist widget
mytasklist = widget.new({ type = "tasklist", name = "mytasklist" })
mytasklist:mouse({ }, 1, function (c) c:focus_set() end)
mytasklist:mouse({ }, 4, function () awful.client.focus(1) end)
mytasklist:mouse({ }, 5, function () awful.client.focus(-1) end)
mytasklist:set("text_focus", "<bg color=\"#555555\"/> <title/> ")

-- Create a textbox widget
mytextbox = widget.new({ type = "textbox", name = "mytextbox", align = "right" })
-- Set the default text in textbox
mytextbox:set("text", "<b><small> awesome " .. AWESOME_VERSION .. " </small></b>")

-- Create an iconbox widget
myiconbox = widget.new({ type = "iconbox", name = "myiconbox", align = "left" })
myiconbox:set("image", "@iconsdir@/awesome16.png")

-- Create an iconbox widget which will contains an icon indicating which layout we're using.
-- We need one layoutbox per screen.
mylayoutbox = {}
for s = 1, screen.count() do
    mylayoutbox[s] = widget.new({ type = "iconbox", name = "myiconbox", align = "right" })
    mylayoutbox[s]:mouse({ }, 1, function () awful.layout.inc(layouts, 1) end)    
    mylayoutbox[s]:mouse({ }, 3, function () awful.layout.inc(layouts, -1) end)    
    mylayoutbox[s]:mouse({ }, 4, function () awful.layout.inc(layouts, 1) end)    
    mylayoutbox[s]:mouse({ }, 5, function () awful.layout.inc(layouts, -1) end)    
    mylayoutbox[s]:set("image", "@iconsdir@/layouts/tilew.png")
end

-- Create a statusbar for each screen and add it
for s = 1, screen.count() do
    mystatusbar = statusbar.new({ position = "top", name = "mystatusbar" .. s,
                                fg = "lightblue", bg = "black" })
    -- Add widgets to the statusbar - order matters
    mystatusbar:widget_add(mytaglist)
    mystatusbar:widget_add(myiconbox)
    mystatusbar:widget_add(mytasklist)
    mystatusbar:widget_add(mytextbox)
    mystatusbar:widget_add(mylayoutbox[s])
    mystatusbar:add(s)
end
-- }}}

-- {{{ Mouse bindings
awesome.mouse({ }, 3, function () awful.spawn(terminal) end)
awesome.mouse({ }, 4, awful.tag.viewnext)
awesome.mouse({ }, 5, awful.tag.viewprev)
client.mouse({ }, 1, function (c) c:focus_set(); c:raise() end)
client.mouse({ modkey }, 1, function (c) c:mouse_move() end)
client.mouse({ modkey }, 3, function (c) c:mouse_resize() end)
-- }}}

-- {{{ Key bindings

-- Bind keyboard digits
-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(9, math.max(#tags[s], keynumber));
end

for i = 1, keynumber do
    keybinding.new({ modkey }, i,
                   function ()
                       local screen = mouse.screen_get()
                       if tags[screen][i] then
                           awful.tag.viewonly(tags[screen][i])
                       end
                   end):add()
    keybinding.new({ modkey, "Control" }, i,
                   function ()
                       local screen = mouse.screen_get()
                       if tags[screen][i] then
                           tags[i]:view(not tags[screen][i]:isselected())
                       end
                   end):add()
    keybinding.new({ modkey, "Shift" }, i,
                   function ()
                       local screen = mouse.screen_get()
                       if tags[screen][i] then
                           awful.client.movetotag(tags[screen][i])
                       end
                   end):add()
    keybinding.new({ modkey, "Control", "Shift" }, i,
                   function ()
                       local screen = mouse.screen_get()
                       if tags[screen][i] then
                           awful.client.toggletag(tags[screen][i])
                       end
                   end):add()
end

keybinding.new({ modkey }, "Left", awful.tag.viewprev):add()
keybinding.new({ modkey }, "Right", awful.tag.viewnext):add()

-- Standard program
keybinding.new({ modkey }, "Return", function () awful.spawn(terminal) end):add()

keybinding.new({ modkey, "Control" }, "r", awesome.restart):add()
keybinding.new({ modkey, "Shift" }, "q", awesome.quit):add()

-- Client manipulation
keybinding.new({ modkey, "Shift" }, "c", function () client.focus_get():kill() end):add()
keybinding.new({ modkey }, "j", function () awful.client.focus(1); client.focus_get():raise() end):add()
keybinding.new({ modkey }, "k", function () awful.client.focus(-1);  client.focus_get():raise() end):add()
keybinding.new({ modkey, "Shift" }, "j", function () awful.client.swap(1) end):add()
keybinding.new({ modkey, "Shift" }, "k", function () awful.client.swap(-1) end):add()
keybinding.new({ modkey, "Control" }, "j", function () awful.screen.focus(1) end):add()
keybinding.new({ modkey, "Control" }, "k", function () awful.screen.focus(-1) end):add()
keybinding.new({ modkey, "Control" }, "space", function () awful.client.togglefloating() end):add()

-- Layout manipulation
keybinding.new({ modkey }, "l", function () awful.tag.incmwfact(0.05) end):add()
keybinding.new({ modkey }, "h", function () awful.tag.incmwfact(-0.05) end):add()
keybinding.new({ modkey, "Shift" }, "h", function () awful.tag.incnmaster(1) end):add()
keybinding.new({ modkey, "Shift" }, "l", function () awful.tag.incnmaster(-1) end):add()
keybinding.new({ modkey, "Control" }, "h", function () awful.tag.incncol(1) end):add()
keybinding.new({ modkey, "Control" }, "l", function () awful.tag.incncol(1) end):add()
keybinding.new({ modkey }, "space", function () awful.layout.inc(layouts, 1) end):add()
keybinding.new({ modkey, "Shift" }, "space", function () awful.layout.inc(layouts, -1) end):add()
-- }}}

-- {{{ Hooks
-- Hook function to execute when focusing a client.
function hook_focus(c)
    c:border_set({ width = 1, color = "white" })
end

-- Hook function to execute when unfocusing a client.
function hook_unfocus(c)
    c:border_set({ width = 1, color = "black" })
end

-- Hook function to exeucte when the mouse is over a client.
function hook_mouseover(c)
    -- Sloppy focus, but disabled for magnifier layout
    if awful.layout.get(c:screen_get()) ~= "magnifier" then
        c:focus_set()
    end
end

-- Hook function to execute when a new client appears.
function hook_newclient(c)
    -- New client may not receive focus
    -- if they're not focusable, so set border anyway.
    c:border_set({ width = 1, color = "black" })
    c:focus_set()
    if c:name_get():lower():find("mplayer") then
        c:floating_set(true)
    end
end

-- Hook function to execute when arranging the screen
-- (tag switch, new client, etc)
function hook_arrange(screen)
    local layout = awful.layout.get(screen)
    mylayoutbox[screen]:set("image", "@iconsdir@/layouts/" .. layout .. "w.png")
end

-- Hook called every 60 seconds
function hook_timer ()
    mytextbox:set("text", os.time() .. " time_t")
end

-- Set up some hooks
hooks.focus(hook_focus)
hooks.unfocus(hook_unfocus)
hooks.newclient(hook_newclient)
hooks.mouseover(hook_mouseover)
hooks.arrange(hook_arrange)
hooks.timer(1, hook_timer)
-- }}}

-- Respect size hints
awesome.resizehints_set(true)
