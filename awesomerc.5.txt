awesomerc(5)
===========

NAME
----

awesomerc - Configuration file for the awesome window manager

SYNOPSIS
--------
None.

DESCRIPTION
-----------
The *awesomerc* file contains configuration informations for *awesome*. It can
be used to configure the behaviour and look of awesome in a variety of ways.
It can be assimilated as a Lua program/script run at startup by awesome.
Therefore, it should use the awesome Lua API described in the API section.
This file is read at startup.

AWESOME LUA API
---------------

Documentation for the Lua API can be found in the luadoc directory.

COLORS FORMAT
-------------
Colors format in *awesome* are either standard X color names
(blue, darkblue, lightred, etc) or hexadecimal formatted colors (#rrggbb).
By using hexadecimal format, you can also specifies an alpha channel:
that means that #00ff00 will draw pure green, but #00ff00aa will set the
alpha channel to `aa' and will blend the green with the color under it.

TEXT FORMAT
-----------
You can use/mix pango-markup and awesome-markup on text properties.
A pango-markup example: "<span weight=\'bold\' foreground=\'#336699\'>...</span>".
An awesome-markup example: "<text align=\'right\'>...</text>".

WIDGETS
-------
The current list of available widget is:

- iconbox
- graph
- progressbar
- taglist
- tasklist
- textbox
- systray

Each widget as its own set of properties, described below, that can bet modified with the set()
method.

ICONBOX
~~~~~~~
*image*::
    The image path.

*resize*::
    True if you want the image to be auto-resized.

PROGRESSBAR
~~~~~~~~~~~
A progressbar widget can contain several bars, so some properties need a data section,
that means a title for the bar. For example, if you want to feed data to the `memory' bar
you want to do mywidget:set("data", "memory 100"), where memory will be the data section.
Using a new data section name will automatically create a new bar.


The following properties require a data section before the value:

*data*::
    Feed with data.

*fg*::
    Foreground color.

*fg_off*::
    Color of unfilled area of bar.

*bg*::
    Background color (between ticks; border_padding space).

*bordercolor*::
    Border color.

*fg_center*::
    Foreground center color.

*fg_end*::
    Foreground end color.

*min_value*::
    Minimum value. This or lower values, draw a 0% bar.

*max_value*::
    Maximum value. This or higher values, draw a 100% bar.

*reverse*::
    True to draw reverse.


The following properties do not require a data section before the value and applies to all bars inside
the widget:

*gap*::
    Gap between borders.

*ticks_count*::
    The number of ticks.

*ticks_gap*::
    The gap between ticks.

*border_padding*::
    The padding inside the border.

*border_width*::
    The border width.

*width*::
    The widget width.

*height*::
    The widget height.

*vertical*::
    If \'true\', bars are vertically aligned. If \'false\', horizontally.

GRAPH
~~~~~
A graph widget can display several data-graphs inside its widget-border. Some
properties need a data section, that means a title for the incoming data. For
example, if you want to feed \'mymemory\' data, you want to do
mywidget:set("data", "mymemory 100").


The following properties require a data section before the value:

*data*::
    Feed with data.

*fg*::
    Foreground color.

*fg_center*::
    Foreground center color.

*fg_end*::
    Foreground end color.

*vertical_gradient*::
    If \'true\', colorgradient shall be applied vertically.

*max_value*::
    Maximum value. Bigger values gets truncated, unless \'scale\' is true.

*scale*::
    Scales the graph acccording to incoming values bigger than \'max_value\'.

*draw_style*::
    \'bottom\', \'top\' or \'line\'.


The following properties do not require a data section before the value:

*width*::
    The widget width.

*height*::
    The widget height.

*bg*::
    Background color.

*bordercolor*::
    Border color.

*grow*::
   \'left\' or \'right\'. E.g. \'right\' means new values get added on the right of the widget.

TAGLIST
~~~~~~~
A taglist widget displays available tags and their state.

*text_normal*::
    Text to display on normal clients. \'<title/>\' substitutes the tag's title.

*text_focus*::
    Text to display on the focused client. \'<title/>\' gets substituted by the tag's title.

*text_urgent*::
    Text to display on urgent clients. \'<title/>\' gets substituted by the tag's title.

*show_empty*::
    \'true\' or \'false\'. If \'false\', empty tags won't get displayed. Selected tags are always displayed so.

TASKLIST
~~~~~~~~
A tasklist widget displays the titles of clients according to the \'show\' setting.

*show*::
    \'tags\', \'focus\' or \'all\'. E.g. \'tags\' shows only clients of currently selected tags.

*text_normal*::
    Text to display on normal clients. \'<title/>\' gets substituted by the client's title.

*text_focus*::
    Text to display on the focused client. \'<title/>\' gets substituted by the client's title.

*text_urgent*::
    Text to display on urgent clients. \'<title/>\' gets substituted by the client's title.

*show_icons*::
    \'true\' or \'false\'. Set to \'true\' if client's icon (if one is avaiable) shall be displayed.


TEXTBOX
~~~~~~~
A textbox displays text.

*width*::
    Width of the widget.

*text*::
    Text to display.

SEE ALSO
--------
awesome(1) awesome-client(1)

AUTHORS
-------
This man page was written by Julien Danjou <julien@danjou.info>.

WWW
---
http://awesome.naquadah.org
